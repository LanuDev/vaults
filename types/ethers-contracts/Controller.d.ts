/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "cream()": FunctionFragment;
    "earn(address,uint256)": FunctionFragment;
    "forTube()": FunctionFragment;
    "setStrategy(address,address)": FunctionFragment;
    "setVault(address,address)": FunctionFragment;
    "strategist()": FunctionFragment;
    "venus()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cream", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "forTube", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "venus", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forTube", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "venus", data: BytesLike): Result;

  events: {};
}

export class Controller extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ControllerInterface;

  functions: {
    cream(overrides?: CallOverrides): Promise<[string]>;

    "cream()"(overrides?: CallOverrides): Promise<[string]>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "earn(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forTube(overrides?: CallOverrides): Promise<[string]>;

    "forTube()"(overrides?: CallOverrides): Promise<[string]>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategy(address,address)"(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVault(address,address)"(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    venus(overrides?: CallOverrides): Promise<[string]>;

    "venus()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cream(overrides?: CallOverrides): Promise<string>;

  "cream()"(overrides?: CallOverrides): Promise<string>;

  earn(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "earn(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forTube(overrides?: CallOverrides): Promise<string>;

  "forTube()"(overrides?: CallOverrides): Promise<string>;

  setStrategy(
    _token: string,
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategy(address,address)"(
    _token: string,
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVault(
    _token: string,
    _vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVault(address,address)"(
    _token: string,
    _vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  venus(overrides?: CallOverrides): Promise<string>;

  "venus()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cream(overrides?: CallOverrides): Promise<string>;

    "cream()"(overrides?: CallOverrides): Promise<string>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "earn(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forTube(overrides?: CallOverrides): Promise<string>;

    "forTube()"(overrides?: CallOverrides): Promise<string>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategy(address,address)"(
      _token: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVault(address,address)"(
      _token: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    venus(overrides?: CallOverrides): Promise<string>;

    "venus()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cream(overrides?: CallOverrides): Promise<BigNumber>;

    "cream()"(overrides?: CallOverrides): Promise<BigNumber>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "earn(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forTube(overrides?: CallOverrides): Promise<BigNumber>;

    "forTube()"(overrides?: CallOverrides): Promise<BigNumber>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategy(address,address)"(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVault(address,address)"(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    venus(overrides?: CallOverrides): Promise<BigNumber>;

    "venus()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cream(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cream()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "earn(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forTube(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forTube()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategy(address,address)"(
      _token: string,
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVault(address,address)"(
      _token: string,
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    venus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "venus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
